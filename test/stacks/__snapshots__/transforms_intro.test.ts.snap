// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WritingConstructs 1`] = `
{
  "Mappings": {
    "LatestNodeRuntimeMap": {
      "af-south-1": {
        "value": "nodejs20.x",
      },
      "ap-east-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-2": {
        "value": "nodejs20.x",
      },
      "ap-northeast-3": {
        "value": "nodejs20.x",
      },
      "ap-south-1": {
        "value": "nodejs20.x",
      },
      "ap-south-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-1": {
        "value": "nodejs20.x",
      },
      "ap-southeast-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-3": {
        "value": "nodejs20.x",
      },
      "ap-southeast-4": {
        "value": "nodejs20.x",
      },
      "ap-southeast-5": {
        "value": "nodejs20.x",
      },
      "ap-southeast-7": {
        "value": "nodejs20.x",
      },
      "ca-central-1": {
        "value": "nodejs20.x",
      },
      "ca-west-1": {
        "value": "nodejs20.x",
      },
      "cn-north-1": {
        "value": "nodejs18.x",
      },
      "cn-northwest-1": {
        "value": "nodejs18.x",
      },
      "eu-central-1": {
        "value": "nodejs20.x",
      },
      "eu-central-2": {
        "value": "nodejs20.x",
      },
      "eu-isoe-west-1": {
        "value": "nodejs18.x",
      },
      "eu-north-1": {
        "value": "nodejs20.x",
      },
      "eu-south-1": {
        "value": "nodejs20.x",
      },
      "eu-south-2": {
        "value": "nodejs20.x",
      },
      "eu-west-1": {
        "value": "nodejs20.x",
      },
      "eu-west-2": {
        "value": "nodejs20.x",
      },
      "eu-west-3": {
        "value": "nodejs20.x",
      },
      "il-central-1": {
        "value": "nodejs20.x",
      },
      "me-central-1": {
        "value": "nodejs20.x",
      },
      "me-south-1": {
        "value": "nodejs20.x",
      },
      "mx-central-1": {
        "value": "nodejs20.x",
      },
      "sa-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-2": {
        "value": "nodejs20.x",
      },
      "us-gov-east-1": {
        "value": "nodejs18.x",
      },
      "us-gov-west-1": {
        "value": "nodejs18.x",
      },
      "us-iso-east-1": {
        "value": "nodejs18.x",
      },
      "us-iso-west-1": {
        "value": "nodejs18.x",
      },
      "us-isob-east-1": {
        "value": "nodejs18.x",
      },
      "us-west-1": {
        "value": "nodejs20.x",
      },
      "us-west-2": {
        "value": "nodejs20.x",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEOnEventB60C9E76": {
      "DependsOn": [
        "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCERole685CF4F2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "53bffefaf92adf01057e890f9fc1cd2cf0e81b6bcc0664b8257d8a6f530177f6.zip",
        },
        "Environment": {
          "Variables": {
            "MOUNTAIN": "Taniquetil",
            "SPIDER": "Ungoliant",
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCERole685CF4F2",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEvent4AE15604": {
      "DependsOn": [
        "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleDefaultPolicy9B953B1F",
        "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleCBAF3CDB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "4dc48ffba382f93077a1e6824599bbd4ceb6f91eb3d9442eca3b85bdb1a20b1e.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (TransformsInfo/CDKORCHCUSTOMRESOURCE::Resources/CDKORCHCUSTOMRESOURCEProvider)",
        "Environment": {
          "Variables": {
            "MOUNTAIN": "Taniquetil",
            "SPIDER": "Ungoliant",
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEOnEventB60C9E76",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleCBAF3CDB",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleCBAF3CDB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleDefaultPolicy9B953B1F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEOnEventB60C9E76",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEOnEventB60C9E76",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleDefaultPolicy9B953B1F",
        "Roles": [
          {
            "Ref": "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleCBAF3CDB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCERole685CF4F2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "FunctionOne8A86801F": {
      "DependsOn": [
        "FunctionOneServiceRoleB0F6870D",
      ],
      "Properties": {
        "Code": {
          "ZipFile": ""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = handler;
function log(message) {
if (process.env.LogLevel) {
console.log(JSON.stringify(message));
}
}
async function handler(event, context) {
log({ Event: event });
log({ Context: context });
return Promise.resolve(event !== null && event !== void 0 ? event : {});
}",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "ELF": "Arondir",
            "HOBBIT": "Drogo",
            "MOUNTAIN": "Taniquetil",
            "SPIDER": "Ungoliant",
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "FunctionOneServiceRoleB0F6870D",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "FunctionOneServiceRoleB0F6870D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "FunctionThreeBD583616": {
      "DependsOn": [
        "FunctionThreeServiceRoleB755B2EA",
      ],
      "Properties": {
        "Code": {
          "ZipFile": ""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = handler;
function log(message) {
if (process.env.LogLevel) {
console.log(JSON.stringify(message));
}
}
async function handler(event, context) {
log({ Event: event });
log({ Context: context });
return Promise.resolve(event !== null && event !== void 0 ? event : {});
}",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "MOUNTAIN": "Taniquetil",
            "SPIDER": "Ungoliant",
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "FunctionThreeServiceRoleB755B2EA",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "FunctionThreeServiceRoleB755B2EA": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "FunctionTwoDAB66576": {
      "DependsOn": [
        "FunctionTwoServiceRoleF26DAB39",
      ],
      "Properties": {
        "Code": {
          "ZipFile": ""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = handler;
function log(message) {
if (process.env.LogLevel) {
console.log(JSON.stringify(message));
}
}
async function handler(event, context) {
log({ Event: event });
log({ Context: context });
return Promise.resolve(event !== null && event !== void 0 ? event : {});
}",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "HOBBIT": "Poppy",
            "MOUNTAIN": "Taniquetil",
            "SPIDER": "Ungoliant",
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "FunctionTwoServiceRoleF26DAB39",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "FunctionTwoServiceRoleF26DAB39": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GreetingLambdaTask6113D194": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "GreetingLambdaTaskCustomResourcePolicyDC090EA0",
      ],
      "Properties": {
        "EncodedProperties": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "{"Create":{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
                {
                  "Ref": "GreetingLambdaTaskReverse66C94AF9",
                },
                "","Payload":"{\\"Greeting\\":\\"Hello, everyone!\\"}"},"physicalResourceId":{"id":"Invoke",
                {
                  "Ref": "GreetingLambdaTaskReverse66C94AF9",
                },
                "-c6ef627ecf342fd2e68e8caeb16b5314"}},"Update":{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
                {
                  "Ref": "GreetingLambdaTaskReverse66C94AF9",
                },
                "","Payload":"{\\"Greeting\\":\\"Hello, everyone!\\"}"},"physicalResourceId":{"id":"Invoke",
                {
                  "Ref": "GreetingLambdaTaskReverse66C94AF9",
                },
                "-c6ef627ecf342fd2e68e8caeb16b5314"}},"ResponseBufferField":"Payload","RequestedOutputs":[],"salt":1730494746733}",
              ],
            ],
          },
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEvent4AE15604",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LambdaTask",
      "UpdateReplacePolicy": "Delete",
    },
    "GreetingLambdaTaskCustomResourcePolicyDC090EA0": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:Invoke",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GreetingLambdaTaskCustomResourcePolicyDC090EA0",
        "Roles": [
          {
            "Ref": "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCERole685CF4F2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GreetingLambdaTaskReverse66C94AF9": {
      "DependsOn": [
        "GreetingLambdaTaskReverseServiceRoleE51874E3",
      ],
      "Properties": {
        "Code": {
          "ZipFile": ""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reverseGreeting = reverseGreeting;
const logger = process.env.LogLevel ? console : undefined;
function log(message) {
logger === null || logger === void 0 ? void 0 : logger.log(JSON.stringify(message));
}

async function reverseGreeting(event, context) {
var _a, _b;
log({ Event: event });
log({ Context: context });
let isCustomResource = event.ResourceProperties != undefined;
if (isCustomResource && 'EncodedProperties' in event.ResourceProperties) {
event.ResourceProperties = {
...event.ResourceProperties,
...JSON.parse(Buffer.from(event.ResourceProperties.EncodedProperties, 'base64').toString('utf8')),
};
log({ DecodedEvent: JSON.stringify(event) });
}
let greeting = (_b = (_a = event.Greeting) !== null && _a !== void 0 ? _a : event.ResourceProperties.Greeting) !== null && _b !== void 0 ? _b : 'Hello, world';
let result = greeting.split('').reverse().join('');
return isCustomResource ? Promise.resolve({
Data: { Greeting: result },
}) : Promise.resolve({
Greeting: result,
});
}",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "LogLevel": "4",
            "MOUNTAIN": "Taniquetil",
            "SPIDER": "Ungoliant",
          },
        },
        "Handler": "index.reverseGreeting",
        "Role": {
          "Fn::GetAtt": [
            "GreetingLambdaTaskReverseServiceRoleE51874E3",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "GreetingLambdaTaskReverseServiceRoleE51874E3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MyBucketF68F3FF0": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "",
            [
              "my-bucket-",
              {
                "Ref": "AWS::AccountId",
              },
              "-",
              {
                "Ref": "AWS::Region",
              },
            ],
          ],
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
