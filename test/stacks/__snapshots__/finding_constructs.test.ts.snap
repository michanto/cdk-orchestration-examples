// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FindingConstructs 1`] = `
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Mappings": {
    "LatestNodeRuntimeMap": {
      "af-south-1": {
        "value": "nodejs20.x",
      },
      "ap-east-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-1": {
        "value": "nodejs20.x",
      },
      "ap-northeast-2": {
        "value": "nodejs20.x",
      },
      "ap-northeast-3": {
        "value": "nodejs20.x",
      },
      "ap-south-1": {
        "value": "nodejs20.x",
      },
      "ap-south-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-1": {
        "value": "nodejs20.x",
      },
      "ap-southeast-2": {
        "value": "nodejs20.x",
      },
      "ap-southeast-3": {
        "value": "nodejs20.x",
      },
      "ap-southeast-4": {
        "value": "nodejs20.x",
      },
      "ap-southeast-5": {
        "value": "nodejs20.x",
      },
      "ap-southeast-7": {
        "value": "nodejs20.x",
      },
      "ca-central-1": {
        "value": "nodejs20.x",
      },
      "ca-west-1": {
        "value": "nodejs20.x",
      },
      "cn-north-1": {
        "value": "nodejs18.x",
      },
      "cn-northwest-1": {
        "value": "nodejs18.x",
      },
      "eu-central-1": {
        "value": "nodejs20.x",
      },
      "eu-central-2": {
        "value": "nodejs20.x",
      },
      "eu-isoe-west-1": {
        "value": "nodejs18.x",
      },
      "eu-north-1": {
        "value": "nodejs20.x",
      },
      "eu-south-1": {
        "value": "nodejs20.x",
      },
      "eu-south-2": {
        "value": "nodejs20.x",
      },
      "eu-west-1": {
        "value": "nodejs20.x",
      },
      "eu-west-2": {
        "value": "nodejs20.x",
      },
      "eu-west-3": {
        "value": "nodejs20.x",
      },
      "il-central-1": {
        "value": "nodejs20.x",
      },
      "me-central-1": {
        "value": "nodejs20.x",
      },
      "me-south-1": {
        "value": "nodejs20.x",
      },
      "mx-central-1": {
        "value": "nodejs20.x",
      },
      "sa-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-1": {
        "value": "nodejs20.x",
      },
      "us-east-2": {
        "value": "nodejs20.x",
      },
      "us-gov-east-1": {
        "value": "nodejs18.x",
      },
      "us-gov-west-1": {
        "value": "nodejs18.x",
      },
      "us-iso-east-1": {
        "value": "nodejs18.x",
      },
      "us-iso-west-1": {
        "value": "nodejs18.x",
      },
      "us-isob-east-1": {
        "value": "nodejs18.x",
      },
      "us-west-1": {
        "value": "nodejs20.x",
      },
      "us-west-2": {
        "value": "nodejs20.x",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "ce2f3595a340d6c519a65888ef97e3b9b64f053f83608e32cc28162e22d7d99a.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEOnEventB60C9E76": {
      "DependsOn": [
        "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCERole685CF4F2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "53bffefaf92adf01057e890f9fc1cd2cf0e81b6bcc0664b8257d8a6f530177f6.zip",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCERole685CF4F2",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEvent4AE15604": {
      "DependsOn": [
        "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleDefaultPolicy9B953B1F",
        "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleCBAF3CDB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "4dc48ffba382f93077a1e6824599bbd4ceb6f91eb3d9442eca3b85bdb1a20b1e.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (FindingConstructs/CDKORCHCUSTOMRESOURCE::Resources/CDKORCHCUSTOMRESOURCEProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEOnEventB60C9E76",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleCBAF3CDB",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleCBAF3CDB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleDefaultPolicy9B953B1F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEOnEventB60C9E76",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEOnEventB60C9E76",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleDefaultPolicy9B953B1F",
        "Roles": [
          {
            "Ref": "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEventServiceRoleCBAF3CDB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCERole685CF4F2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GreetingLambdaTask6113D194": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "GreetingLambdaTaskCustomResourcePolicyDC090EA0",
      ],
      "Properties": {
        "EncodedProperties": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "{"Create":{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
                {
                  "Ref": "GreetingLambdaTaskReverse66C94AF9",
                },
                "","Payload":"{\\"Greeting\\":\\"Hello, everyone!\\"}"},"physicalResourceId":{"id":"Invoke",
                {
                  "Ref": "GreetingLambdaTaskReverse66C94AF9",
                },
                "-c6ef627ecf342fd2e68e8caeb16b5314"}},"Update":{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
                {
                  "Ref": "GreetingLambdaTaskReverse66C94AF9",
                },
                "","Payload":"{\\"Greeting\\":\\"Hello, everyone!\\"}"},"physicalResourceId":{"id":"Invoke",
                {
                  "Ref": "GreetingLambdaTaskReverse66C94AF9",
                },
                "-c6ef627ecf342fd2e68e8caeb16b5314"}},"ResponseBufferField":"Payload","RequestedOutputs":[],"salt":1729969244613}",
              ],
            ],
          },
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCEProviderframeworkonEvent4AE15604",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LambdaTask",
      "UpdateReplacePolicy": "Delete",
    },
    "GreetingLambdaTaskCustomResourcePolicyDC090EA0": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:Invoke",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GreetingLambdaTaskCustomResourcePolicyDC090EA0",
        "Roles": [
          {
            "Ref": "CDKORCHCUSTOMRESOURCEResourcesCDKORCHCUSTOMRESOURCERole685CF4F2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "GreetingLambdaTaskReverse66C94AF9": {
      "DependsOn": [
        "GreetingLambdaTaskReverseServiceRoleE51874E3",
      ],
      "Properties": {
        "Code": {
          "ZipFile": ""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reverseGreeting = reverseGreeting;
const logger = process.env.LogLevel ? console : undefined;
function log(message) {
logger === null || logger === void 0 ? void 0 : logger.log(JSON.stringify(message));
}

async function reverseGreeting(event, context) {
var _a, _b;
log({ Event: event });
log({ Context: context });
let isCustomResource = event.ResourceProperties != undefined;
if (isCustomResource && 'EncodedProperties' in event.ResourceProperties) {
event.ResourceProperties = {
...event.ResourceProperties,
...JSON.parse(Buffer.from(event.ResourceProperties.EncodedProperties, 'base64').toString('utf8')),
};
log({ DecodedEvent: JSON.stringify(event) });
}
let greeting = (_b = (_a = event.Greeting) !== null && _a !== void 0 ? _a : event.ResourceProperties.Greeting) !== null && _b !== void 0 ? _b : 'Hello, world';
let result = greeting.split('').reverse().join('');
return isCustomResource ? Promise.resolve({
Data: { Greeting: result },
}) : Promise.resolve({
Greeting: result,
});
}",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "LogLevel": "3",
          },
        },
        "Handler": "index.reverseGreeting",
        "Role": {
          "Fn::GetAtt": [
            "GreetingLambdaTaskReverseServiceRoleE51874E3",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "GreetingLambdaTaskReverseServiceRoleE51874E3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "HitlStateMachine1F6B4EA3": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "HitlStateMachineRoleDefaultPolicyA53B927D",
        "HitlStateMachineRoleA10670B9",
      ],
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"AreRunsComplete?","States":{"AreRunsComplete?":{"Type":"Pass","Result":{"s3Uri":"s3://hitl-test-runs/runs/hitl-host-02/2024-05-10T10:38:27Z/15a85c7d-d7ca-43b4-906a-818488f39177","allRunsComplete":true,"allRunsSuccessful":true},"Next":"EchoStep"},"EchoStep":{"Next":"AreRunsSuccessful?","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","Resource":"",
              {
                "Fn::GetAtt": [
                  "HitlStepFunctionDefinitionEchoLambdaBA8B279B",
                  "Arn",
                ],
              },
              ""},"AreRunsSuccessful?":{"Type":"Choice","Choices":[{"And":[{"Variable":"$.allRunsComplete","BooleanEquals":true},{"Variable":"$.allRunsSuccessful","BooleanEquals":true}],"Next":"SucceedStep"}],"Default":"FailStep"},"FailStep":{"Type":"Fail","Comment":"All runs complete but not successful","CausePath":"States.JsonToString($)"},"SucceedStep":{"Type":"Succeed","Comment":"All runs complete and successful"}}}",
            ],
          ],
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "HitlStateMachineRoleA10670B9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "HitlStateMachineRoleA10670B9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "HitlStateMachineRoleDefaultPolicyA53B927D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "HitlStepFunctionDefinitionEchoLambdaBA8B279B",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "HitlStepFunctionDefinitionEchoLambdaBA8B279B",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "HitlStateMachineRoleDefaultPolicyA53B927D",
        "Roles": [
          {
            "Ref": "HitlStateMachineRoleA10670B9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "HitlStepFunctionDefinitionEchoLambdaBA8B279B": {
      "DependsOn": [
        "HitlStepFunctionDefinitionEchoLambdaServiceRole542BD097",
      ],
      "Properties": {
        "Code": {
          "ZipFile": ""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = handler;
function log(message) {
if (process.env.LogLevel) {
console.log(JSON.stringify(message));
}
}
async function handler(event, context) {
log({ Event: event });
log({ Context: context });
return Promise.resolve(event !== null && event !== void 0 ? event : {});
}",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "LogLevel": "1",
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "HitlStepFunctionDefinitionEchoLambdaServiceRole542BD097",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "HitlStepFunctionDefinitionEchoLambdaServiceRole542BD097": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "MyBucketF68F3FF0": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cirdan": "shipwright",
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "MyCfnBucket": {
      "Type": "AWS::S3::Bucket",
    },
    "MyOtherCfnBucket": {
      "Type": "AWS::S3::Bucket",
    },
    "MyS3FileResource1CAF1D27": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "MyS3FileResourceCustomResourcePolicy761A62A0",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"S3","action":"putObject","parameters":{"Body":"{\\"dummy\\":\\"data\\"}","Bucket":"",
              {
                "Ref": "MyBucketF68F3FF0",
              },
              "","Key":"dummy.json"},"physicalResourceId":{"id":"s3:://",
              {
                "Ref": "MyBucketF68F3FF0",
              },
              "/dummy.json"}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "MyS3FileResourceCustomResourcePolicy761A62A0": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutObject",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "MyBucketF68F3FF0",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "MyBucketF68F3FF0",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "MyS3FileResourceCustomResourcePolicy761A62A0",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PyStepFunctionsImportSFRole7AFE3505": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RunHitlStateMachineRunIt5945DEE1": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "HitlStateMachine1F6B4EA3",
        "HitlStateMachineRoleDefaultPolicyA53B927D",
        "HitlStateMachineRoleA10670B9",
      ],
      "Properties": {
        "EncodedProperties": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "{"StateMachineArn":"",
                {
                  "Ref": "HitlStateMachine1F6B4EA3",
                },
                "","SucceedAfterMs":3540000,"OutputPaths":[],"salt":1729969244613}",
              ],
            ],
          },
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonEvent9D2C3EB6",
            "Arn",
          ],
        },
      },
      "Type": "Custom::StepFunctionTaskStep",
      "UpdateReplacePolicy": "Retain",
    },
    "RunHitlStateMachineWaitForIt1CF428B5D": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "RunHitlStateMachineRunIt5945DEE1",
      ],
      "Properties": {
        "EncodedProperties": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "{"ExecutionArn":"",
                {
                  "Ref": "RunHitlStateMachineRunIt5945DEE1",
                },
                "","SucceedAfterMs":7080000,"Suffix":"1","OutputPaths":[],"salt":1729969244613}",
              ],
            ],
          },
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonEvent9D2C3EB6",
            "Arn",
          ],
        },
      },
      "Type": "Custom::StepFunctionTaskStep",
      "UpdateReplacePolicy": "Retain",
    },
    "RunHitlStateMachineWaitForIt2D0473E87": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "RunHitlStateMachineWaitForIt1CF428B5D",
      ],
      "Properties": {
        "EncodedProperties": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "{"ExecutionArn":"",
                {
                  "Ref": "RunHitlStateMachineRunIt5945DEE1",
                },
                "","Suffix":"2","OutputPaths":[],"salt":1729969244613}",
              ],
            ],
          },
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonEvent9D2C3EB6",
            "Arn",
          ],
        },
      },
      "Type": "Custom::StepFunctionTaskStep",
      "UpdateReplacePolicy": "Retain",
    },
    "StateMachineComponent": {
      "Properties": {
        "DefinitionString": "{
  "StartAt": "MyPassState",
  "States": {
    "MyPassState": {
      "Type": "Pass",
      "Next": "Wait for 3 seconds"
    },
    "Wait for 3 seconds": {
      "Seconds": 3,
      "Type": "Wait",
      "Next": "Convert HelloWorld to Base64"
    },
    "Convert HelloWorld to Base64": {
      "Parameters": {
        "FunctionName": "MyLambda",
        "Payload": {
          "input": "HelloWorld"
        }
      },
      "Resource": "arn:aws:states:::lambda:invoke",
      "Type": "Task",
      "End": true,
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "IntervalSeconds": 15,
          "MaxAttempts": 2,
          "BackoffRate": 4.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "Next": "LambdaTaskFailed"
        }
      ]
    },
    "LambdaTaskFailed": {
      "Type": "Fail"
    }
  }
}",
        "RoleArn": {
          "Fn::GetAtt": [
            "PyStepFunctionsImportSFRole7AFE3505",
            "Arn",
          ],
        },
        "StateMachineName": "MyWorkflow",
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepIsCompleteC615327A": {
      "DependsOn": [
        "StepFunctionTaskStepResourcesStepFunctionTaskStepRole8FEABF28",
      ],
      "Properties": {
        "Code": {
          "ZipFile": ""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stepFunctionComplete = exports.startStepFunction = void 0;
exports.flatten = flatten;
exports.filterKeys = filterKeys;
exports.startsWithOneOf = startsWithOneOf;
const crypto_1 = require("crypto");
const client_sfn_1 = require("@aws-sdk/client-sfn");
const logger = process.env.LogLevel ? console : undefined;

function flatten(root) {
const ret = {};
recurse(root);
return ret;
function recurse(x, path = []) {
if (x && typeof x === 'object') {
for (const [key, value] of Object.entries(x)) {
recurse(value, [...path, key]);
}
return;
}
ret[path.join('.')] = x;
}
}

function filterKeys(object, pred) {
return Object.entries(object)
.reduce((acc, [k, v]) => pred(k)
? { ...acc, [k]: v }
: acc, {});
}

function startsWithOneOf(searchStrings) {
return function (string) {
for (const searchString of searchStrings) {
if (string.startsWith(searchString)) {
return true;
}
}
return false;
};
}
function log(message) {
logger?.log(JSON.stringify(message));
}
const startStepFunction = async (event, context) => {
log({ Event: event });
log({ Context: context });
if (event.RequestType == 'Delete') {
return Promise.resolve({
IsComplete: true,
});
}

if ('EncodedProperties' in event.ResourceProperties) {
event.ResourceProperties = JSON.parse(Buffer
.from(event.ResourceProperties.EncodedProperties, 'base64')
.toString('utf8'));
log({ DecodedEvent: JSON.stringify(event) });
}
let stepFunction = new client_sfn_1.SFN({
logger: logger,
});
let stateMachineArn = event.ResourceProperties.StateMachineArn;
let executionArn = event.ResourceProperties.ExecutionArn;
let stateMachineEvent = event.ResourceProperties.StateMachineEvent;
let succeedAfterMs = event.ResourceProperties.SucceedAfterMs;
if (stateMachineArn) {
let prefix = event.ResourceProperties.Prefix;
let request = {
stateMachineArn: stateMachineArn,
input: JSON.stringify(stateMachineEvent),
};
if (prefix) {
request.name = \`\${prefix}_\${(0, crypto_1.randomUUID)()}\`;
}
let result = await stepFunction.startExecution(request);
return Promise.resolve({
PhysicalResourceId: result.executionArn,
ExecutionArn: result.executionArn,
StartDate: result.startDate,
SucceedAfterMs: succeedAfterMs,
IsComplete: false,
OutputPaths: event.ResourceProperties.OutputPaths,
Defaults: event.ResourceProperties.Defaults,
});
}
else if (executionArn) {
let suffix = event.ResourceProperties.Suffix;
let result = await stepFunction.describeExecution({
executionArn: executionArn,
});
let physicalResourceId = \`\${result.executionArn}.\${suffix}\`;
return Promise.resolve({
PhysicalResourceId: physicalResourceId,
ExecutionArn: result.executionArn,
StartDate: result.startDate,
SucceedAfterMs: succeedAfterMs,
OutputPaths: event.ResourceProperties.OutputPaths,
Defaults: event.ResourceProperties.Defaults,
IsComplete: false,
});
}
return Promise.reject({
Reason: 'One of StateMachineArn or ExecutionArn must be specified.',
});
};
exports.startStepFunction = startStepFunction;
const stepFunctionComplete = async (event, context) => {
log({ Event: event });
log({ Context: context });
if (event.RequestType == 'Delete') {
return Promise.resolve({
IsComplete: true,
});
}
let stepFunction = new client_sfn_1.SFN({
logger: logger,
});
let result = await stepFunction.describeExecution({
executionArn: event.ExecutionArn,
});
let continueStates = ['RUNNING'];
let succeededStates = ['SUCCEEDED'];
let failedStates = ['FAILED', 'TIMED_OUT', 'ABORTED'];
if (failedStates.includes(result.status)) {
throw new Error(\`Arn: \${result.executionArn}. Status: \${result.status}. Error: '\${result.error}' Cause: '\${result.cause}'\`);
}
let isComplete = succeededStates.includes(result.status);
if (!isComplete && !continueStates.includes(result.status)) {
throw new Error(\`Unknown state: \${result.status}.\`);
}
let now = Date.now();
log({ Now: now, StartDate: result.startDate.getTime() });
let succeedAfterMs = event.SucceedAfterMs;


if (!isComplete && succeedAfterMs && (now - result.startDate.getTime()) > succeedAfterMs) {
log({ Message: 'Timed out.  Complete regardless of StepFunction state.' });
isComplete = true;
}
else {
log({ IsComplete: isComplete });
}
let response = {
ExecutionArn: event.ExecutionArn,
StartDate: event.StartDate,
SucceedAfterMs: succeedAfterMs,
IsComplete: isComplete,
OutputPaths: event.OutputPaths,
Defaults: event.Defaults,
};

if (event.OutputPaths) {
let flattened = flatten(result.output);
let defaults = filterKeys((event.Defaults ?? {}), startsWithOneOf(event.OutputPaths));
let filtered = filterKeys(flattened, startsWithOneOf(event.OutputPaths));
response.Data = {
...defaults,
...filtered,
};
}
return Promise.resolve(response);
};
exports.stepFunctionComplete = stepFunctionComplete;",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.stepFunctionComplete",
        "Role": {
          "Fn::GetAtt": [
            "StepFunctionTaskStepResourcesStepFunctionTaskStepRole8FEABF28",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepOnEvent71816DC9": {
      "DependsOn": [
        "StepFunctionTaskStepResourcesStepFunctionTaskStepRole8FEABF28",
      ],
      "Properties": {
        "Code": {
          "ZipFile": ""use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stepFunctionComplete = exports.startStepFunction = void 0;
exports.flatten = flatten;
exports.filterKeys = filterKeys;
exports.startsWithOneOf = startsWithOneOf;
const crypto_1 = require("crypto");
const client_sfn_1 = require("@aws-sdk/client-sfn");
const logger = process.env.LogLevel ? console : undefined;

function flatten(root) {
const ret = {};
recurse(root);
return ret;
function recurse(x, path = []) {
if (x && typeof x === 'object') {
for (const [key, value] of Object.entries(x)) {
recurse(value, [...path, key]);
}
return;
}
ret[path.join('.')] = x;
}
}

function filterKeys(object, pred) {
return Object.entries(object)
.reduce((acc, [k, v]) => pred(k)
? { ...acc, [k]: v }
: acc, {});
}

function startsWithOneOf(searchStrings) {
return function (string) {
for (const searchString of searchStrings) {
if (string.startsWith(searchString)) {
return true;
}
}
return false;
};
}
function log(message) {
logger?.log(JSON.stringify(message));
}
const startStepFunction = async (event, context) => {
log({ Event: event });
log({ Context: context });
if (event.RequestType == 'Delete') {
return Promise.resolve({
IsComplete: true,
});
}

if ('EncodedProperties' in event.ResourceProperties) {
event.ResourceProperties = JSON.parse(Buffer
.from(event.ResourceProperties.EncodedProperties, 'base64')
.toString('utf8'));
log({ DecodedEvent: JSON.stringify(event) });
}
let stepFunction = new client_sfn_1.SFN({
logger: logger,
});
let stateMachineArn = event.ResourceProperties.StateMachineArn;
let executionArn = event.ResourceProperties.ExecutionArn;
let stateMachineEvent = event.ResourceProperties.StateMachineEvent;
let succeedAfterMs = event.ResourceProperties.SucceedAfterMs;
if (stateMachineArn) {
let prefix = event.ResourceProperties.Prefix;
let request = {
stateMachineArn: stateMachineArn,
input: JSON.stringify(stateMachineEvent),
};
if (prefix) {
request.name = \`\${prefix}_\${(0, crypto_1.randomUUID)()}\`;
}
let result = await stepFunction.startExecution(request);
return Promise.resolve({
PhysicalResourceId: result.executionArn,
ExecutionArn: result.executionArn,
StartDate: result.startDate,
SucceedAfterMs: succeedAfterMs,
IsComplete: false,
OutputPaths: event.ResourceProperties.OutputPaths,
Defaults: event.ResourceProperties.Defaults,
});
}
else if (executionArn) {
let suffix = event.ResourceProperties.Suffix;
let result = await stepFunction.describeExecution({
executionArn: executionArn,
});
let physicalResourceId = \`\${result.executionArn}.\${suffix}\`;
return Promise.resolve({
PhysicalResourceId: physicalResourceId,
ExecutionArn: result.executionArn,
StartDate: result.startDate,
SucceedAfterMs: succeedAfterMs,
OutputPaths: event.ResourceProperties.OutputPaths,
Defaults: event.ResourceProperties.Defaults,
IsComplete: false,
});
}
return Promise.reject({
Reason: 'One of StateMachineArn or ExecutionArn must be specified.',
});
};
exports.startStepFunction = startStepFunction;
const stepFunctionComplete = async (event, context) => {
log({ Event: event });
log({ Context: context });
if (event.RequestType == 'Delete') {
return Promise.resolve({
IsComplete: true,
});
}
let stepFunction = new client_sfn_1.SFN({
logger: logger,
});
let result = await stepFunction.describeExecution({
executionArn: event.ExecutionArn,
});
let continueStates = ['RUNNING'];
let succeededStates = ['SUCCEEDED'];
let failedStates = ['FAILED', 'TIMED_OUT', 'ABORTED'];
if (failedStates.includes(result.status)) {
throw new Error(\`Arn: \${result.executionArn}. Status: \${result.status}. Error: '\${result.error}' Cause: '\${result.cause}'\`);
}
let isComplete = succeededStates.includes(result.status);
if (!isComplete && !continueStates.includes(result.status)) {
throw new Error(\`Unknown state: \${result.status}.\`);
}
let now = Date.now();
log({ Now: now, StartDate: result.startDate.getTime() });
let succeedAfterMs = event.SucceedAfterMs;


if (!isComplete && succeedAfterMs && (now - result.startDate.getTime()) > succeedAfterMs) {
log({ Message: 'Timed out.  Complete regardless of StepFunction state.' });
isComplete = true;
}
else {
log({ IsComplete: isComplete });
}
let response = {
ExecutionArn: event.ExecutionArn,
StartDate: event.StartDate,
SucceedAfterMs: succeedAfterMs,
IsComplete: isComplete,
OutputPaths: event.OutputPaths,
Defaults: event.Defaults,
};

if (event.OutputPaths) {
let flattened = flatten(result.output);
let defaults = filterKeys((event.Defaults ?? {}), startsWithOneOf(event.OutputPaths));
let filtered = filterKeys(flattened, startsWithOneOf(event.OutputPaths));
response.Data = {
...defaults,
...filtered,
};
}
return Promise.resolve(response);
};
exports.stepFunctionComplete = stepFunctionComplete;",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.startStepFunction",
        "Role": {
          "Fn::GetAtt": [
            "StepFunctionTaskStepResourcesStepFunctionTaskStepRole8FEABF28",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisComplete48653344": {
      "DependsOn": [
        "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisCompleteServiceRoleDefaultPolicy3F21E37E",
        "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisCompleteServiceRole70FA82F3",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "4dc48ffba382f93077a1e6824599bbd4ceb6f91eb3d9442eca3b85bdb1a20b1e.zip",
        },
        "Description": "AWS CDK resource provider framework - isComplete (FindingConstructs/StepFunctionTaskStepResources/StepFunctionTaskStepProvider)",
        "Environment": {
          "Variables": {
            "USER_IS_COMPLETE_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "StepFunctionTaskStepResourcesStepFunctionTaskStepIsCompleteC615327A",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "StepFunctionTaskStepResourcesStepFunctionTaskStepOnEvent71816DC9",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.isComplete",
        "Role": {
          "Fn::GetAtt": [
            "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisCompleteServiceRole70FA82F3",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisCompleteServiceRole70FA82F3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisCompleteServiceRoleDefaultPolicy3F21E37E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StepFunctionTaskStepResourcesStepFunctionTaskStepOnEvent71816DC9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StepFunctionTaskStepResourcesStepFunctionTaskStepOnEvent71816DC9",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StepFunctionTaskStepResourcesStepFunctionTaskStepIsCompleteC615327A",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StepFunctionTaskStepResourcesStepFunctionTaskStepIsCompleteC615327A",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisCompleteServiceRoleDefaultPolicy3F21E37E",
        "Roles": [
          {
            "Ref": "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisCompleteServiceRole70FA82F3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonEvent9D2C3EB6": {
      "DependsOn": [
        "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonEventServiceRoleDefaultPolicyCDF2B7E2",
        "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonEventServiceRoleC4623120",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "4dc48ffba382f93077a1e6824599bbd4ceb6f91eb3d9442eca3b85bdb1a20b1e.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (FindingConstructs/StepFunctionTaskStepResources/StepFunctionTaskStepProvider)",
        "Environment": {
          "Variables": {
            "USER_IS_COMPLETE_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "StepFunctionTaskStepResourcesStepFunctionTaskStepIsCompleteC615327A",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "StepFunctionTaskStepResourcesStepFunctionTaskStepOnEvent71816DC9",
                "Arn",
              ],
            },
            "WAITER_STATE_MACHINE_ARN": {
              "Ref": "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineA5471E7D",
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonEventServiceRoleC4623120",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonEventServiceRoleC4623120": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonEventServiceRoleDefaultPolicyCDF2B7E2": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StepFunctionTaskStepResourcesStepFunctionTaskStepOnEvent71816DC9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StepFunctionTaskStepResourcesStepFunctionTaskStepOnEvent71816DC9",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StepFunctionTaskStepResourcesStepFunctionTaskStepIsCompleteC615327A",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StepFunctionTaskStepResourcesStepFunctionTaskStepIsCompleteC615327A",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineA5471E7D",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonEventServiceRoleDefaultPolicyCDF2B7E2",
        "Roles": [
          {
            "Ref": "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonEventServiceRoleC4623120",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonTimeoutB0C276CE": {
      "DependsOn": [
        "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonTimeoutServiceRoleDefaultPolicy9EA2F13E",
        "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonTimeoutServiceRoleDD6F0E8E",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "4dc48ffba382f93077a1e6824599bbd4ceb6f91eb3d9442eca3b85bdb1a20b1e.zip",
        },
        "Description": "AWS CDK resource provider framework - onTimeout (FindingConstructs/StepFunctionTaskStepResources/StepFunctionTaskStepProvider)",
        "Environment": {
          "Variables": {
            "USER_IS_COMPLETE_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "StepFunctionTaskStepResourcesStepFunctionTaskStepIsCompleteC615327A",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "StepFunctionTaskStepResourcesStepFunctionTaskStepOnEvent71816DC9",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onTimeout",
        "Role": {
          "Fn::GetAtt": [
            "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonTimeoutServiceRoleDD6F0E8E",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonTimeoutServiceRoleDD6F0E8E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonTimeoutServiceRoleDefaultPolicy9EA2F13E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StepFunctionTaskStepResourcesStepFunctionTaskStepOnEvent71816DC9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StepFunctionTaskStepResourcesStepFunctionTaskStepOnEvent71816DC9",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StepFunctionTaskStepResourcesStepFunctionTaskStepIsCompleteC615327A",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StepFunctionTaskStepResourcesStepFunctionTaskStepIsCompleteC615327A",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonTimeoutServiceRoleDefaultPolicy9EA2F13E",
        "Roles": [
          {
            "Ref": "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonTimeoutServiceRoleDD6F0E8E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineA5471E7D": {
      "DependsOn": [
        "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineRoleDefaultPolicy9FA4DF7F",
        "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineRole9809049C",
      ],
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"framework-isComplete-task","States":{"framework-isComplete-task":{"End":true,"Retry":[{"ErrorEquals":["States.ALL"],"IntervalSeconds":30,"MaxAttempts":120,"BackoffRate":1}],"Catch":[{"ErrorEquals":["States.ALL"],"Next":"framework-onTimeout-task"}],"Type":"Task","Resource":"",
              {
                "Fn::GetAtt": [
                  "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisComplete48653344",
                  "Arn",
                ],
              },
              ""},"framework-onTimeout-task":{"End":true,"Type":"Task","Resource":"",
              {
                "Fn::GetAtt": [
                  "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonTimeoutB0C276CE",
                  "Arn",
                ],
              },
              ""}}}",
            ],
          ],
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineLogGroupC3DBDC7A",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "IncludeExecutionData": false,
          "Level": "ERROR",
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineRole9809049C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineLogGroupC3DBDC7A": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/vendedlogs/states/waiter-state-machine-",
              {
                "Ref": "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisComplete48653344",
              },
              "-c89301be385c2fe989a89577fcd35d14e2d682b178",
            ],
          ],
        },
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineRole9809049C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineRoleDefaultPolicy9FA4DF7F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisComplete48653344",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkisComplete48653344",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonTimeoutB0C276CE",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderframeworkonTimeoutB0C276CE",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:CreateLogStream",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutLogEvents",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineRoleDefaultPolicy9FA4DF7F",
        "Roles": [
          {
            "Ref": "StepFunctionTaskStepResourcesStepFunctionTaskStepProviderwaiterstatemachineRole9809049C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StepFunctionTaskStepResourcesStepFunctionTaskStepRole8FEABF28": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "states:*",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "StepFunctionTaskPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
